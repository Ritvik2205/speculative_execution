#!/usr/bin/env python3
"""
Summary of Vulnerability Types Supported by SpecExec Pipeline
Based on the c_vulns/ folder reference implementations
"""

VULNERABILITY_TYPES = {
    'SPECTRE_V1': {
        'name': 'Spectre Variant 1 (Bounds Check Bypass)',
        'description': 'Exploits speculative execution past bounds checks',
        'key_patterns': ['bounds_check', 'conditional_branch', 'array_access', 'probe_pattern'],
        'c_files': ['spectre_1.c', 'spectre_1_arm64.c', 'spectre_1_arm64_int.c', 'spectre_v1.c'],
        'asm_files': ['spectre_1_x86.s', 'spectre_1_arm64.s', 'spectre_v1_arm64_int.s']
    },
    
    'SPECTRE_V2': {
        'name': 'Spectre Variant 2 (Branch Target Injection)',  
        'description': 'Exploits indirect branch prediction to execute arbitrary code',
        'key_patterns': ['indirect_branch', 'branch_predictor', 'speculation_barrier'],
        'c_files': ['spectre_2.c', 'spectre_2_arm64.c'],
        'asm_files': ['spectre_2_arm64.s']
    },
    
    'MELTDOWN': {
        'name': 'Meltdown (Rogue Data Cache Load)',
        'description': 'Exploits out-of-order execution to access privileged memory',
        'key_patterns': ['privileged_access', 'exception_handling', 'dependent_load', 'cache_probe'],
        'c_files': ['meltdown.c', 'meltdown_arm64.c'], 
        'asm_files': ['meltdown_arm64.s']
    },
    
    'RETBLEED': {
        'name': 'Retbleed (Return Address Injection)',
        'description': 'Exploits return instruction speculation via RSB manipulation',
        'key_patterns': ['return_instruction', 'stack_manipulation', 'indirect_call'],
        'c_files': ['retbleed.c', 'retbleed_arm64.c'],
        'asm_files': ['retbleed.s', 'retbleed_arm.s']
    },
    
    'BHI': {
        'name': 'Branch History Injection (Spectre-BHB)',
        'description': 'Exploits branch history buffer to misdirect indirect branches',
        'key_patterns': ['branch_history_pollution', 'indirect_branch', 'btb_manipulation'],
        'c_files': ['bhi.c', 'bhi_arm64.c'],
        'asm_files': ['bhi_x86.s', 'bhi_arm.s']
    },
    
    'INCEPTION': {
        'name': 'Inception (Speculative Return Stack Overflow)',
        'description': 'AMD-specific attack exploiting return address stack overflow',
        'key_patterns': ['return_stack_overflow', 'deep_call_chain', 'ras_pollution'],
        'c_files': ['inception.c', 'inception_x86.c', 'inception_arm64.c'],
        'asm_files': ['inception_x86.s', 'inception_arm.s']
    },
    
    'L1TF': {
        'name': 'L1 Terminal Fault (Foreshadow)',
        'description': 'Exploits L1 cache to access unmapped memory pages',
        'key_patterns': ['page_fault_handling', 'l1_cache_access', 'exception_suppression'],
        'c_files': ['l1tf.c', 'l1tf_arm64.c'],
        'asm_files': ['l1tf_arm.s']
    },
    
    'MDS': {
        'name': 'Microarchitectural Data Sampling',
        'description': 'Exploits CPU buffers to leak data across security boundaries',
        'key_patterns': ['store_buffer_sampling', 'load_port_sampling', 'memory_disambiguation'],
        'c_files': ['mds.c', 'mds_arm64.c'],
        'asm_files': ['mds.s', 'mds_arm.s']
    }
}

def print_vulnerability_summary():
    """Print a comprehensive summary of supported vulnerability types"""
    print("=" * 80)
    print("SPECEXEC VULNERABILITY DETECTION PIPELINE")
    print("Supported Vulnerability Types")
    print("=" * 80)
    
    print(f"\nTotal vulnerability types supported: {len(VULNERABILITY_TYPES)}")
    print("\nDetailed breakdown:\n")
    
    for vuln_id, info in VULNERABILITY_TYPES.items():
        print(f"üîç {vuln_id}")
        print(f"   Name: {info['name']}")
        print(f"   Description: {info['description']}")
        print(f"   Key Patterns: {', '.join(info['key_patterns'][:3])}")
        print(f"   Reference Files: {len(info['c_files'])} C files, {len(info['asm_files'])} ASM files")
        print()

def get_supported_types():
    """Return list of supported vulnerability type IDs"""
    return list(VULNERABILITY_TYPES.keys())

def get_vulnerability_info(vuln_type):
    """Get detailed information about a specific vulnerability type"""
    return VULNERABILITY_TYPES.get(vuln_type.upper(), None)

if __name__ == "__main__":
    print_vulnerability_summary()
    
    print("\nPattern files that have been updated:")
    print("‚úÖ githubCrawl/extract_gadgets.py - Added BHI, INCEPTION, L1TF, MDS patterns")
    print("‚úÖ githubCrawl/preprocess_vuln_assembly.py - Already includes all types")
    print("‚úÖ githubCrawl/extracted_gadgets/open_pkl.py - Fixed class definitions")
    
    print(f"\nSupported vulnerability IDs: {', '.join(get_supported_types())}") 