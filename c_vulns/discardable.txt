Discardable Parts (for Generative Model's Direct Output)
These parts are generally boilerplate, standard library calls, or high-level program flow that would be handled by your surrounding framework, compiler, or operating system, rather than being generated by the core model itself.

Function Preamble and Epilogue (Stack Management):

sub sp, sp, #XX

stp x29, x30, [sp, #YY]

add x29, sp, #ZZ

ldp x29, x30, [sp, #YY]

add sp, sp, #XX

ret

.cfi_* directives

Reason: These are compiler-generated boilerplate for setting up and tearing down stack frames and debugger information. Your generative model will likely focus on the attack payload instructions.

Calls to Standard Library Functions:

bl _printf

bl _bzero

bl _signal

bl _perror

bl _clock_gettime

Reason: These are high-level I/O, system calls, or utility functions that provide the framework for the demo but are not part of the core speculative execution attack itself.

High-Level Loop Control and Branching for the Overall Experiment:

The complex branching (b.ge, b.ne, cbnz, cbz) and loop counter logic found in _flush_probe_array, _common_init, _perform_measurement, and the main loop in _main_meltdown.

Reason: These control the flow of the entire experiment (e.g., "run 500 iterations," "check all 256 probe array entries"). Your generative model focuses on the "smallest instruction sequences" that trigger leaks, not necessarily the encompassing test harness, unless your project explicitly aims to generate full attack programs.

Assembly Directives and Metadata:

.section, .build_version, .globl, .p2align, .comm, .zerofill, .cstring, .subsections_via_symbols, l_.str* (string literals).

Reason: These are instructions for the assembler and linker, defining sections, global symbols, alignment, memory allocation, and literal data. They are not executable instructions.

_main function:

This function just calls _main_meltdown. It's a simple entry point for the executable.

Reason: It's a wrapper, not an attack primitive.